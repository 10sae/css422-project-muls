00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/18/2021 2:34:36 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Final Project
00000000                             3  * Written by : MULS (Ben, Tensae, Jose, Gabriela)
00000000                             4  * Date       : April 28, 2021
00000000                             5  * Description: 
00000000                             6  *-----------------------------------------------------------
00001000                             7  MAIN:       ORG         $1000
00001000                             8  
00001000  =0000000D                  9  CR:         EQU         $0D
00001000  =0000000A                 10  LF:         EQU         $0A
00001000                            11  
00001000= 00000000                  12  staHex:     DC.L        $0
00001004= 00000000                  13  endHex:     DC.L        $0
00001008                            14  *-----------------------------------------------------------
00001008                            15  * I/O Implementation
00001008                            16  ;1. Prompt user for start and ending addresses (In hex)
00001008                            17  ;2. User inputs their values
00001008                            18  ;3. Check for errors
00001008                            19  ;        Check to see if hex is too big
00001008                            20  ;        Check to see value doesn't contain G-Z
00001008                            21  ;        Check to see if there are no commas/special chars
00001008                            22  ;        Check to see that starting loc, is before ending loc
00001008                            23  ;        Check to see if value starts at odd mem location
00001008                            24  *-----------------------------------------------------------
00001008                            25              ;Show welcome to user
00001008  43F9 000015BC             26              LEA         Welcome,A1
0000100E  103C 000E                 27              MOVE.B      #14,D0
00001012  4E4F                      28              TRAP        #15
00001014                            29                     
00001014                            30              ;===TESTING===
00001014  49D3                      31              LEA (A3),A4
00001016  4600                      32              NOT.B    D0
00001018                            33              
00001018                            34  startingPrompt:
00001018                            35              ;Ask the user for the starting hex3
00001018  43F9 000015E0             36              LEA         userSA,A1
0000101E  103C 000E                 37              MOVE.B      #14,D0
00001022  4E4F                      38              TRAP        #15        
00001024                            39              
00001024                            40              ;Clear the registers in case we had an error
00001024  227C 00000000             41              MOVE.L      #0,A1
0000102A  247C 00000000             42              MOVE.L      #0,A2
00001030  4283                      43              CLR.L       D3
00001032  4284                      44              CLR.L       D4
00001034  4285                      45              CLR.L       D5
00001036  4286                      46              CLR.L       D6
00001038                            47             
00001038                            48              
00001038                            49              ;Input for the hex (D1 equals number of chars)
00001038  303C 0002                 50              MOVE.W      #2,D0
0000103C  4E4F                      51              TRAP        #15
0000103E                            52              
0000103E                            53              ;Moves A1 into A2      
0000103E                            54              ;MOVEA.L     A1,A2
0000103E                            55              
0000103E                            56              ;Makes sure D7 is clear incase we're looping back after an error.
0000103E  4207                      57              CLR.B       D7
00001040                            58              
00001040  6000 002A                 59              BRA         convert  
00001044                            60              
00001044                            61  endingPrompt:
00001044                            62              ;D7 is if we're working with the first or second promt, used in the more checks section. 
00001044  1E3C 0001                 63              MOVE.B       #1,D7
00001048                            64              
00001048                            65              ;Ask the user for the ending hex
00001048  43F9 00001622             66              LEA         userEA,A1
0000104E  103C 000E                 67              MOVE.B      #14,D0
00001052  4E4F                      68              TRAP        #15
00001054                            69              
00001054                            70              ;Clearing the registers so we can reuse them for the ending address
00001054  227C 00000000             71              MOVE.L      #0,A1
0000105A  247C 00000000             72              MOVE.L      #0,A2
00001060  4286                      73              CLR.L       D6
00001062                            74  
00001062                            75              ;Input for the hex (D1 equals number of chars)
00001062  303C 0002                 76              MOVE.W      #2,D0
00001066  4E4F                      77              TRAP        #15
00001068                            78              
00001068                            79              ;Moves A1 into A2      
00001068                            80              ;MOVEA.L     A1,A2
00001068                            81              
00001068  6000 0002                 82              BRA         convert
0000106C                            83  
0000106C                            84  convert:    
0000106C                            85              ;Check to see if D1 is greater than 6, limiting the address to 6 characters (subject to change)
0000106C  B23C 0006                 86              CMP.B       #6, D1
00001070  6E00 052A                 87              BGT         manyCharError  
00001074                            88              
00001074                            89              ;See if our counter variable is 0
00001074  B23C 0000                 90              CMP.B       #0,D1
00001078                            91              
00001078                            92              ;This means that we have gone through all the characters
00001078  6700 0046                 93              BEQ         moreChecks
0000107C                            94              
0000107C                            95              ;Decrement the counter, this means we're about to go through another char
0000107C  5301                      96              SUB.B       #1,D1
0000107E                            97  
0000107E                            98              ;Let's move the byte stored at A1
0000107E  1612                      99              MOVE.B      (A2),D3
00001080                           100              
00001080                           101              ;If the byte is greater than or equal to hex $40, then it's a letter
00001080  B63C 0041                102              CMP.B       #$41,D3
00001084  6C00 000A                103              BGE         letter
00001088                           104              
00001088                           105              ;If the byte is less than or equal to hex $39, then it's a number
00001088  B63C 0040                106              CMP.B       #$40,D3
0000108C  6F00 0016                107              BLE         number
00001090                           108              
00001090                           109  letter:
00001090                           110              ;We do this check to see if the character is greater than or equal 'G'
00001090  B63C 0047                111              CMP.B       #$47,D3
00001094                           112              ;If so, then display an error and ask the user to enter startingAdd again
00001094  6C00 04E6                113              BGE         charError
00001098                           114              
00001098                           115              ;Subtract the Ascii value to convert to hex
00001098  0403 0037                116              SUB.B       #$37,D3
0000109C                           117              ;Move the value back to our register
0000109C  14C3                     118              MOVE.B      D3,(A2)+
0000109E                           119              
0000109E                           120              ;Shift D5 left to make room for next hex value
0000109E  E986                     121              ASL.L       #4, D6
000010A0                           122              ;Move value to D5
000010A0  DC03                     123              ADD.B      D3, D6
000010A2                           124              
000010A2  60C8                     125              BRA         convert
000010A4                           126             
000010A4                           127  
000010A4                           128  number:          
000010A4                           129             ;We do this check to see if the character is less than or equal to '/'  
000010A4  B63C 002F                130             CMP.B        #$2F,D3
000010A8                           131             ;If so, then display an error and ask the user to enter startingAdd again
000010A8  6F00 04D2                132             BLE          charError     
000010AC                           133   
000010AC                           134             ;Check to see if the character is greater than or equal to ':'
000010AC  B63C 003A                135             CMP.B        #$3A,D3
000010B0                           136             ;If so, then display an error and ask the user to enter startingAdd again
000010B0  6C00 04CA                137             BGE          charError
000010B4                           138            
000010B4                           139             ;Subtract the Ascii value to convert to hex
000010B4  0403 0030                140             SUB.B        #$30,D3
000010B8                           141             ;Move the value back to our register
000010B8  14C3                     142             MOVE.B       D3,(A2)+
000010BA                           143   
000010BA                           144             ;Shift D5 left to make room for next hex value
000010BA  E986                     145             ASL.L        #4, D6
000010BC                           146             ;Move value to D5
000010BC  DC03                     147             ADD.B        D3, D6
000010BE                           148              
000010BE  60AC                     149             BRA          convert
000010C0                           150   
000010C0                           151            
000010C0                           152  moreChecks:
000010C0                           153              ;Determine if we're going to moreChecks1 or moreChecks2 (if we're on starting or ending address)
000010C0  BE3C 0001                154              CMP.B      #1,D7
000010C4  6700 0028                155              BEQ        moreChecks2
000010C8                           156              
000010C8  6000 0002                157              BRA        moreChecks1
000010CC                           158   
000010CC                           159  moreChecks1:
000010CC                           160              
000010CC                           161              ;Copy the hex value into a temp register
000010CC  2806                     162              MOVE.L      D6,D4
000010CE                           163              
000010CE                           164              ;Placeholder to shift bits, used for seeing if the address is odd. 
000010CE  1A3C 001F                165              MOVE.B      #31,D5
000010D2                           166              
000010D2                           167              ;Shifts 31 bits, isolates last bit. 
000010D2  EBAC                     168              LSL.L       D5,D4
000010D4                           169  
000010D4                           170              ;Shifts it back 31 bit, isolating the last bit. 
000010D4  EAAC                     171              LSR.L       D5,D4
000010D6                           172  
000010D6                           173              ;If the last bit is 1, address was odd, and throw an error. 
000010D6  B83C 0001                174              CMP.B       #1,D4
000010DA  6700 04B0                175              BEQ         oddError   
000010DE                           176                          
000010DE                           177              ;Reset address registers.
000010DE  247C 00000000            178              MOVE.L      #0,A2
000010E4                           179              
000010E4                           180              ;Copy the value to our staHex variable
000010E4  21C6 1000                181              MOVE.L      D6,staHex 
000010E8                           182              
000010E8  4286                     183              CLR.L       D6
000010EA  6000 FF58                184              BRA         endingPrompt     
000010EE                           185              
000010EE                           186  moreChecks2:       
000010EE                           187              
000010EE                           188              ;Copy the hex value into a temp register
000010EE  2806                     189              MOVE.L      D6,D4
000010F0                           190              
000010F0                           191              ;Placeholder to shift bits, used for seeing if the address is odd. 
000010F0  1A3C 001F                192              MOVE.B      #31,D5
000010F4                           193              
000010F4                           194              ;Shifts 31 bits, isolates last bit. 
000010F4  EBAC                     195              LSL.L       D5,D4
000010F6                           196  
000010F6                           197              ;Shifts it back 31 bit, isolating the last bit. 
000010F6  EAAC                     198              LSR.L       D5,D4
000010F8                           199  
000010F8                           200              ;If the last bit is 1, address was odd, and throw an error. 
000010F8  B83C 0001                201              CMP.B       #1,D4
000010FC  6700 048E                202              BEQ         oddError   
00001100                           203                          
00001100                           204              ;Reset address registers.
00001100  247C 00000000            205              MOVE.L      #0,A2
00001106                           206              
00001106                           207              ;Place the value in our ending hex variable
00001106  21C6 1004                208              MOVE.L      D6,endHex 
0000110A                           209              
0000110A                           210              ;Make D7 a temp location to compare our starting hex
0000110A  2E38 1000                211              MOVE.L      staHex,D7
0000110E                           212           
0000110E                           213              
0000110E                           214              ;Compare the starting hex, with the ending hex to see if endHex is less than starting        
0000110E  BC87                     215              CMP.L       D7,D6
00001110  6B00 049A                216              BMI         endGreater
00001114                           217              
00001114                           218              ;done, start reading memory. 
00001114                           219              
00001114                           220              ;Clear all the registers since we have the addresses stored in our variables
00001114  4283                     221              CLR.L       D3
00001116  4285                     222              CLR.L       D5
00001118  4286                     223              CLR.L       D6
0000111A  4287                     224              CLR.L       D7  
0000111C                           225              
0000111C                           226              ;Copy the value of our starting hex to A2 (temp register)
0000111C  2478 1000                227              MOVEA.L     staHex,A2
00001120                           228                          
00001120                           229              
00001120                           230  LOOP:   
00001120                           231              ;--------------------------------------------------------
00001120                           232              ;Check for NOP or RTS
00001120                           233              ;--------------------------------------------------------
00001120                           234              
00001120                           235              ;Move the NOP binary value for comparing
00001120  243C 00004E71            236              MOVE.L      #%0100111001110001,D2
00001126                           237              
00001126                           238              ;Check and see i the instruction is NOP
00001126  B452                     239              CMP.W       (A2),D2
00001128  6700 0432                240              BEQ         printN
0000112C                           241              
0000112C                           242              ;Move the RTS binary value for comparing
0000112C  243C 00004E75            243              MOVE.L      #%0100111001110101,D2
00001132                           244              
00001132                           245              ;Check and see if the instruction is RTS
00001132  B452                     246              CMP.W       (A2),D2
00001134  6700 0436                247              BEQ         printR
00001138                           248              
00001138                           249              ;Clear the contents for reusing
00001138  4282                     250              CLR.L       D2
0000113A                           251              
0000113A                           252              
0000113A                           253              ;--------------------------------------------------------
0000113A                           254              ;Check for MOVE, since it's the only word starting with 00
0000113A                           255              ;--------------------------------------------------------            
0000113A                           256              ;Move the value in A2 to a temp register
0000113A  1412                     257              MOVE.B      (A2),D2
0000113C                           258              
0000113C                           259              ;Shift 6 bits to the right to isolate the left-most digits
0000113C  EC8A                     260              LSR.L       #6,D2
0000113E                           261              
0000113E                           262              ;If the first two bits (left-most) are 00, then the instruction is MOVE
0000113E  B43C 0000                263              CMP.B       #00,D2
00001142  6F00 0070                264              BLE         M00
00001146                           265              
00001146                           266              ;Reuse the register
00001146  4282                     267              CLR.L       D2
00001148                           268              
00001148                           269              
00001148                           270              ;--------------------------------------------------------
00001148                           271              ;Check for other OpCodes
00001148                           272              ;--------------------------------------------------------
00001148                           273              ;Move the word into a temp register 
00001148  3412                     274              MOVE.W      (A2),D2
0000114A                           275              
0000114A                           276              ;Passing in parameters for isolating the left most hand 4 bits of D2 using getBits
0000114A  163C 000C                277              MOVE.B        #12,D3            ;Start bit index = 12
0000114E  183C 0004                278              MOVE.B        #4,D4             ;Number of bits needed = 4
00001152                           279              
00001152                           280              ;Jumps to getBits and returns with isolated bits in D2
00001152  6100 004A                281              BSR           getBits            
00001156                           282  
00001156                           283              
00001156                           284              ;MOVEM,LEA,NOT,JSR
00001156  B43C 0004                285              CMP.B       #%0100,D2
0000115A  6700 007E                286              BEQ         M0100
0000115E                           287              
0000115E                           288              ;BRA,BLT,BGE,BEQ
0000115E  B43C 0006                289              CMP.B       #%0110,D2
00001162  6700 0146                290              BEQ         M0110
00001166                           291              
00001166                           292              ;DIVU
00001166  B43C 0008                293              CMP.B       #%1000,D2
0000116A  6700 013E                294              BEQ         M1000
0000116E                           295              
0000116E                           296              ;SUB
0000116E  B43C 0009                297              CMP.B       #%1001,D2
00001172  6700 0162                298              BEQ         M1001
00001176                           299              
00001176                           300              ;MULS,AND
00001176  B43C 000C                301              CMP.B       #%1100,D2
0000117A  6700 0198                302              BEQ         M1100
0000117E                           303              
0000117E                           304              ;LSL,LSR,ASL,ASR
0000117E  B43C 000E                305              CMP.B       #%1110,D2
00001182  6700 0204                306              BEQ         M1110
00001186                           307              
00001186                           308              ;ADD
00001186  B43C 000D                309              CMP.B       #%1101,D2
0000118A  6700 01FC                310              BEQ         M1101
0000118E                           311              
0000118E  6000 0692                312              BRA         ending
00001192                           313              
00001192                           314              
00001192                           315              
00001192                           316              ;display INVALID OPCODE, and display the raw hex
00001192                           317              ;do this later
00001192                           318  
00001192                           319             
00001192                           320  update:
00001192                           321              ;Check and see if we are at the ending hex
00001192  B5F8 1004                322              CMP.L      endHex,A2
00001196  6700 068A                323              BEQ        ending
0000119A                           324  
0000119A                           325              ;Update address in A2
0000119A  548A                     326              ADD.L      #2,A2
0000119C                           327              
0000119C                           328              
0000119C  6082                     329              BRA        LOOP
0000119E                           330              
0000119E                           331              
0000119E                           332  getBits:
0000119E                           333              ;GETS ___ MANY BITS STARTING FROM __ START BIT INDEX
0000119E                           334              ;PARAMETERS:
0000119E                           335              ;D2 = the value the bits are extracted from & saved back in
0000119E                           336              ;D3 = the start bit index (starting from 0)
0000119E                           337              ;D4 = the number of bits we want to extract
0000119E                           338              
0000119E                           339              ;Calculate left shift
0000119E  3A3C 0010                340              MOVE.W      #16,D5
000011A2                           341              
000011A2  D843                     342              ADD.W       D3,D4             ; start bit index + number of bits needed = X 
000011A4  9A44                     343              SUB.W       D4,D5             ; 16 - X = leftShift
000011A6                           344              
000011A6  EB6A                     345              LSL.W       D5,D2
000011A8                           346              
000011A8                           347              
000011A8                           348              ;Calculate right shift
000011A8  DA43                     349              ADD.W       D3,D5             ; start bit + leftShift = X
000011AA  EA6A                     350              LSR.W       D5,D2
000011AC                           351              
000011AC  4283                     352              CLR.L       D3
000011AE  4284                     353              CLR.L       D4
000011B0  4285                     354              CLR.L       D5   
000011B2  4E75                     355              RTS
000011B4                           356  
000011B4                           357  *-----------------------------------------------------------
000011B4                           358  * OpCode Implementation
000011B4                           359  *-----------------------------------------------------------
000011B4                           360  
000011B4                           361  
000011B4                           362  *-----------------------------------------------------------
000011B4                           363  * MOVE INSTRUCTION
000011B4                           364  *-----------------------------------------------------------
000011B4                           365  M00:
000011B4  43F9 00001668            366              LEA        printMOVE,A1
000011BA  103C 000E                367              MOVE.B     #14,D0
000011BE  4E4F                     368              TRAP       #15
000011C0                           369              
000011C0  4202                     370              CLR.B      D2
000011C2  4203                     371              CLR.B      D3
000011C4                           372              
000011C4                           373              ;======Isolate Size (S) Bits=======
000011C4                           374              ;Copy the address values into a register
000011C4  3412                     375              MOVE.W     (A2),D2
000011C6                           376              
000011C6                           377              ;Passing in parameters for isolating size bits 12,13
000011C6  163C 000D                378              MOVE.B      #13,D3             
000011CA  183C 0002                379              MOVE.B      #2,D4             
000011CE                           380              
000011CE                           381              ;Jumps to getBits and returns with isolated bits in D2
000011CE  61CE                     382              BSR         getBits  
000011D0                           383              
000011D0                           384              ;Jumps to printSizeSubroutine and returns after size has been printed
000011D0  6100 027A                385              BSR         printSizeSubroutine
000011D4                           386              
000011D4                           387              ;Clear the register so we can reuse it
000011D4  4282                     388              CLR.L       D2
000011D6                           389              
000011D6  1412                     390              MOVE.B      (A2),D2
000011D8                           391  
000011D8                           392              
000011D8                           393              ;Get bits 11-6 for the source
000011D8                           394              ;First we must figure out the register that is being used
000011D8                           395              ;Then find the addressing mode
000011D8                           396              
000011D8                           397              ;Get bits 0-15 for the destination
000011D8                           398              ;This uses the same procedure from previous opcodes
000011D8                           399              ;First find the addressing mode
000011D8                           400              ;Then find the register that is being used
000011D8                           401              
000011D8  60B8                     402              BRA        update
000011DA                           403            
000011DA                           404  
000011DA                           405  *-----------------------------------------------------------
000011DA                           406  * MOVEM,LEA,NOT,JSR INSTRUCTIONS
000011DA                           407  *-----------------------------------------------------------
000011DA                           408  M0100:      
000011DA  4282                     409              CLR.L       D2
000011DC  4283                     410              CLR.L       D3
000011DE                           411              
000011DE                           412              ;--------------------------------------------------------
000011DE                           413              ;Check for LEA
000011DE                           414              ;--------------------------------------------------------
000011DE                           415              ;Copy the address values into a register to check for LEA
000011DE  3412                     416              MOVE.W     (A2),D2
000011E0                           417              
000011E0                           418              ;Passing in parameters for isolating bits 6,7,8
000011E0  163C 0006                419              MOVE.B      #6,D3             ;Start bit index = 6
000011E4  183C 0003                420              MOVE.B      #3,D4             ;Number of bits needed = 3
000011E8                           421              
000011E8                           422              ;Jumps to getBits and returns with isolated bits in D2
000011E8  61B4                     423              BSR         getBits
000011EA                           424  
000011EA  B43C 0007                425              CMP.B       #%111,D2
000011EE  6700 0046                426              BEQ         MLEA
000011F2                           427  
000011F2                           428              ;--------------------------------------------------------
000011F2                           429              ;Check for NOT
000011F2                           430              ;--------------------------------------------------------
000011F2                           431              ;Clear D2 and recopy it to check for NOT
000011F2  4282                     432              CLR.L       D2
000011F4  3412                     433              MOVE.W      (A2),D2
000011F6                           434              
000011F6                           435              ;Pass in parameters for isolating bits 8,9,10,11
000011F6  163C 0008                436              MOVE.B      #8,D3
000011FA  183C 0004                437              MOVE.B      #4,D4
000011FE                           438              
000011FE                           439              ;Jumps to getBits and returns with isolated bits in D2
000011FE  619E                     440              BSR         getBits
00001200                           441              
00001200  B43C 0006                442              CMP.B       #%0110,D2
00001204  6700 0060                443              BEQ         MNOT      
00001208                           444              
00001208                           445              ;--------------------------------------------------------
00001208                           446              ;Check for JSR
00001208                           447              ;--------------------------------------------------------
00001208                           448              ;Clear D2 and recopy it to check for JSR
00001208  4282                     449              CLR.L       D2
0000120A  3412                     450              MOVE.W     (A2),D2
0000120C                           451              
0000120C                           452              ;Pass in parameters for isolating bits 6-11
0000120C  163C 0006                453              MOVE.B      #6,D3
00001210  183C 0006                454              MOVE.B      #6,D4
00001214                           455              
00001214                           456              ;Jumps to getBits and returns with isolated bits in D2
00001214  6188                     457              BSR         getBits
00001216                           458              
00001216  B43C 003A                459              CMP.B       #%111010,D2
0000121A  6700 0076                460              BEQ         MJSR
0000121E                           461              
0000121E                           462              ;--------------------------------------------------------
0000121E                           463              ;Check for MOVEM
0000121E                           464              ;--------------------------------------------------------
0000121E                           465              ;Clear D2 and recopy it to check for MOVEM
0000121E  4282                     466              CLR.L       D2
00001220  3412                     467              MOVE.W     (A2),D2
00001222                           468              
00001222                           469              ;Pass in parameters for isolating bit 9
00001222  163C 0009                470              MOVE.B      #9,D3
00001226  183C 0001                471              MOVE.B      #1,D4
0000122A                           472              
0000122A                           473              ;Jumps to getBits and returns with isolated bits in D2
0000122A  6100 FF72                474              BSR         getBits
0000122E                           475              
0000122E  B43C 0000                476              CMP.B       #%0,D2
00001232  6700 0002                477              BEQ         MOVEM
00001236                           478              
00001236                           479         
00001236                           480  MOVEM:
00001236                           481  
00001236                           482  MLEA:
00001236  43F9 00001697            483              LEA         printLEA,A1
0000123C  103C 000E                484              MOVE.B      #14,D0
00001240  4E4F                     485              TRAP        #15
00001242                           486              
00001242                           487              ;*SOURCE*
00001242                           488              ;Jumps to helper subroutine to isolates and return the address mode & register stored in bits 0 - 5
00001242                           489              ;D6 will contain mode & D7 will contain the register after this instruction
00001242  6100 01CA                490              BSR         isolateAddressBit0to5
00001246                           491              
00001246                           492              ;*Print source address*
00001246  6100 025E                493              BSR         addressModeSR
0000124A                           494              
0000124A                           495              ;Print comma after source address
0000124A  43F9 0000170F            496              LEA         printComma,A1
00001250  103C 000E                497              MOVE.B      #14,D0
00001254  4E4F                     498              TRAP        #15
00001256                           499              
00001256                           500              ;*DESTINATION*
00001256                           501              ;Jumps to helper subroutine to isolates and return the register stored in bits 9 - 11
00001256                           502              ;D7 will contain the register after this instruction
00001256  6100 01DC                503              BSR         isolateRegisterBit9to11
0000125A                           504              
0000125A                           505              ;Save #%001 into D6 to specify address register mode
0000125A  1C3C 0001                506              MOVE.B      #1,D6
0000125E                           507              
0000125E                           508              
0000125E                           509              ;*Print destination address*
0000125E  6100 0246                510              BSR         addressModeSR
00001262                           511  
00001262  6000 FF2E                512              BRA        update
00001266                           513  
00001266                           514  MNOT:
00001266  43F9 000016A4            515              LEA        printNOT,A1
0000126C  103C 000E                516              MOVE.B     #14,D0
00001270  4E4F                     517              TRAP       #15
00001272                           518              
00001272  4282                     519              CLR.L      D2
00001274                           520              ;Move the address into the register to check for size
00001274  3412                     521              MOVE.W     (A2),D2
00001276                           522              
00001276                           523              ;Pass in parameters for isolating bits 6,7
00001276  163C 0006                524              MOVE.B     #6,D3
0000127A  183C 0002                525              MOVE.B     #2,D4
0000127E                           526              
0000127E                           527              ;Jump to getbits and return with isolated bits
0000127E  6100 FF1E                528              BSR        getbits          
00001282                           529              
00001282                           530              ;Jumps to printSizeSubroutine and returns after size has been printed
00001282  6100 01C8                531              BSR        printSizeSubroutine
00001286                           532              
00001286                           533              ;*SOURCE*
00001286                           534              ;Jumps to helper subroutine to isolates and return the address mode & register stored in bits 0 - 5
00001286                           535              ;D6 will contain mode & D7 will contain the register after this instruction
00001286  6100 0186                536              BSR        isolateAddressBit0to5
0000128A                           537              
0000128A                           538              ;*Print source address*
0000128A  6100 021A                539              BSR        addressModeSR
0000128E                           540              
0000128E  6000 FF02                541              BRA        update 
00001292                           542  
00001292                           543  MJSR:
00001292  43F9 000016D4            544              LEA        printJSR,A1
00001298  103C 000E                545              MOVE.B     #14,D0
0000129C  4E4F                     546              TRAP       #15
0000129E                           547              
0000129E                           548              ;*SOURCE*
0000129E                           549              ;Jumps to helper subroutine to isolates and return the address mode & register stored in bits 0 - 5
0000129E                           550              ;D6 will contain mode & D7 will contain the register after this instruction
0000129E  6100 016E                551              BSR        isolateAddressBit0to5
000012A2                           552              
000012A2                           553              ;*Print source address*
000012A2  6100 0202                554              BSR        addressModeSR
000012A6                           555              
000012A6  6000 FEEA                556              BRA        update 
000012AA                           557              
000012AA                           558  
000012AA                           559  *-----------------------------------------------------------
000012AA                           560  * BRA,BLT,BGE,BEQ INSTRUCTIONS
000012AA                           561  *-----------------------------------------------------------       
000012AA                           562  M0110:
000012AA                           563              ;
000012AA                           564  MBRA:
000012AA                           565  MBLT:
000012AA                           566  MBGE:
000012AA                           567  MBEQ:            
000012AA                           568              
000012AA                           569  
000012AA                           570  *-----------------------------------------------------------
000012AA                           571  * DIVU INSTRUCTION
000012AA                           572  *-----------------------------------------------------------           
000012AA                           573  M1000:
000012AA                           574              
000012AA  4282                     575              CLR.L       D2
000012AC  4283                     576              CLR.L       D3
000012AE                           577              
000012AE                           578              ;Copy the address values into a register
000012AE  3412                     579              MOVE.W     (A2),D2
000012B0                           580              
000012B0                           581              ;Passing in parameters for isolating bits 6,7,8
000012B0  163C 0006                582              MOVE.B      #6,D3             ;Start bit index = 6
000012B4  183C 0003                583              MOVE.B      #3,D4             ;Number of bits needed = 3
000012B8                           584              
000012B8                           585              ;Jumps to getBits and returns with isolated bits in D2
000012B8  6100 FEE4                586              BSR         getBits
000012BC                           587              
000012BC                           588              ;If bits 6,7,8 are #%011, then it's DIVU. Otherwise, branch to error message
000012BC  B4BC 00000003            589              CMP.L       #%011,D2
000012C2  6700 0002                590              BEQ         continueDIVU
000012C6                           591              
000012C6                           592              ;************TO DO: BRANCH TO ERROR MESSAGE IF NOT DIVU**************
000012C6                           593  
000012C6                           594  continueDIVU:
000012C6                           595  
000012C6  43F9 0000168D            596              LEA         printDIVU,A1
000012CC  103C 000E                597              MOVE.B      #14,D0
000012D0  4E4F                     598              TRAP        #15
000012D2                           599              
000012D2  6000 00F2                600              BRA         dnDest
000012D6                           601              
000012D6                           602              
000012D6                           603  *-----------------------------------------------------------
000012D6                           604  * SUB INSTRUCTION
000012D6                           605  *-----------------------------------------------------------  
000012D6                           606  M1001:
000012D6  43F9 0000167D            607              LEA        printSUB,A1
000012DC  103C 000E                608              MOVE.B     #14,D0
000012E0  4E4F                     609              TRAP       #15
000012E2                           610              
000012E2  4202                     611              CLR.B      D2
000012E4  4203                     612              CLR.B      D3
000012E6                           613              
000012E6                           614              ;======Isolate Size (S) Bits=======
000012E6                           615              ;Copy the address values into a register
000012E6  3412                     616              MOVE.W     (A2),D2
000012E8                           617              
000012E8                           618              ;Passing in parameters for isolating size bits
000012E8  163C 0006                619              MOVE.B      #6,D3             ;Start bit index = 6
000012EC  183C 0002                620              MOVE.B      #2,D4             ;Number of bits needed = 2
000012F0                           621              
000012F0                           622              ;Jumps to getBits and returns with isolated bits in D2
000012F0  6100 FEAC                623              BSR         getBits  
000012F4                           624              
000012F4                           625              ;Jumps to printSizeSubroutine and returns after size has been printed
000012F4  6100 0156                626              BSR         printSizeSubroutine
000012F8                           627              
000012F8                           628         
000012F8                           629              ;======Isolate direction (D) Bit=======
000012F8                           630              ; 0 = data register is destination | 1 = Dn is source
000012F8  4282                     631              CLR.L       D2
000012FA                           632              
000012FA                           633              ;Copy the address values into a register
000012FA  3412                     634              MOVE.W      (A2),D2
000012FC                           635              
000012FC                           636              ;Passing in parameters for isolating direction bit
000012FC  163C 0008                637              MOVE.B      #8,D3             ;Start bit index = 8
00001300  183C 0001                638              MOVE.B      #1,D4             ;Number of bits needed = 1
00001304                           639              
00001304                           640              ;Jumps to getBits and returns with isolated bit in D2
00001304  6100 FE98                641              BSR         getBits
00001308                           642              
00001308                           643              ;Uses direction bit to see if Dn is the destination. Important because it determines the order in which we isolate and print the addressing bits.
00001308  B43C 0000                644              CMP.B       #0,D2
0000130C  6700 00B8                645              BEQ         dnDest
00001310  6000 00D8                646              BRA         dnSource
00001314                           647  
00001314                           648  
00001314                           649  *-----------------------------------------------------------
00001314                           650  * MULS,AND INSTRUCTIONS
00001314                           651  *-----------------------------------------------------------  
00001314                           652  M1100:      
00001314  4282                     653              CLR.L       D2
00001316  4283                     654              CLR.L       D3
00001318                           655              
00001318                           656              ;Copy the address values into a register
00001318  3412                     657              MOVE.W     (A2),D2
0000131A                           658              
0000131A                           659              ;Passing in parameters for isolating bits 6 and 7
0000131A  163C 0006                660              MOVE.B      #6,D3             ;Start bit index = 6
0000131E  183C 0002                661              MOVE.B      #2,D4             ;Number of bits needed = 2
00001322                           662              
00001322                           663              ;Jumps to getBits and returns with isolated bits in D2
00001322  6100 FE7A                664              BSR         getBits  
00001326                           665              
00001326                           666              ;If bits 6 & 7 are not #%11 then the opcode is MAND. If they are, then check 8th bit to determine if its MULS
00001326  B43C 0003                667              CMP.B       #%11,D2
0000132A  6700 0006                668              BEQ         mulsCheck
0000132E  6000 0028                669              BRA         MAND
00001332                           670              
00001332                           671  mulsCheck:
00001332                           672              ;Copy the address values into a register
00001332  3412                     673              MOVE.W     (A2),D2
00001334                           674              
00001334                           675              ;Passing in parameters for isolating bit 8
00001334  163C 0008                676              MOVE.B      #8,D3             ;Start bit index = 8
00001338  183C 0001                677              MOVE.B      #1,D4             ;Number of bits needed = 1
0000133C                           678              
0000133C                           679              ;Jumps to getBits and returns with isolated bits in D2
0000133C  6100 FE60                680              BSR         getBits 
00001340                           681              
00001340                           682              ;If 8th bit is 1 then branch to MULS. Otherwise, print error
00001340  B43C 0001                683              CMP.B       #1,D2
00001344  6700 0002                684              BEQ         MMULS
00001348                           685              
00001348                           686              ;************TO DO: BRANCH TO ERROR MESSAGE IF NOT MULS**************
00001348                           687  
00001348                           688              
00001348                           689              
00001348                           690              
00001348                           691  MMULS:
00001348  43F9 00001683            692              LEA         printMULS,A1
0000134E  103C 000E                693              MOVE.B      #14,D0
00001352  4E4F                     694              TRAP        #15
00001354                           695              
00001354  6000 0070                696              BRA         dnDest 
00001358                           697  
00001358                           698  
00001358                           699  MAND:
00001358  43F9 0000169E            700              LEA        printAND,A1
0000135E  103C 000E                701              MOVE.B     #14,D0
00001362  4E4F                     702              TRAP       #15
00001364                           703              
00001364                           704              ;D2 already contains the size bits for AND (bits 6,7) so no need for isolating again
00001364                           705              ;Jumps to printSizeSubroutine and returns after size has been printed
00001364  6100 00E6                706              BSR         printSizeSubroutine
00001368                           707              
00001368                           708              ;======Isolate direction (D) Bit=======
00001368                           709              ; 0 = data register is destination | 1 = Dn is source
00001368  4282                     710              CLR.L       D2
0000136A                           711              
0000136A                           712              ;Copy the address values into a register
0000136A  3412                     713              MOVE.W      (A2),D2
0000136C                           714              
0000136C                           715              ;Passing in parameters for isolating direction bit
0000136C  163C 0008                716              MOVE.B      #8,D3           ;Start bit index = 8
00001370  183C 0001                717              MOVE.B      #1,D4           ;Number of bits needed = 1
00001374                           718  
00001374                           719              ;Jumps to getBits and returns with isolated bit in D2
00001374  6100 FE28                720              BSR         getBits
00001378                           721              
00001378                           722              ;Uses direction bit to see if Dn is the destination. Important because it determines the order in which we isolate and print the addressing bits.
00001378  B43C 0000                723              CMP.B       #0,D2
0000137C  6700 0048                724              BEQ         dnDest
00001380  6000 0068                725              BRA         dnSource
00001384                           726              
00001384                           727              
00001384  6000 FE0C                728              BRA         update          ;Unnecessary with current implementation. dnDest & dnSource will call it instead
00001388                           729     
00001388                           730     
00001388                           731  *-----------------------------------------------------------
00001388                           732  * LSL,LSR,ASL,ASR INSTRUCTIONS
00001388                           733  *-----------------------------------------------------------  
00001388                           734  M1110:
00001388                           735  
00001388                           736  MLSL:
00001388                           737  MLSR:
00001388                           738  MASL:
00001388                           739  MASR:
00001388                           740  *-----------------------------------------------------------------------
00001388                           741  *-----------------------------------------------------------------------
00001388                           742  *-----------------------------------------------------------------------
00001388                           743  
00001388                           744  
00001388                           745  
00001388                           746  
00001388                           747  ;ADD
00001388                           748  M1101:
00001388  43F9 00001677            749              LEA        printADD,A1
0000138E  103C 000E                750              MOVE.B     #14,D0
00001392  4E4F                     751              TRAP       #15
00001394                           752              
00001394  4202                     753              CLR.B      D2
00001396  4203                     754              CLR.B      D3
00001398                           755              
00001398                           756              ;======Isolate Size (S) Bits=======
00001398                           757              ;Copy the address values into a register
00001398  3412                     758              MOVE.W     (A2),D2
0000139A                           759              
0000139A                           760              ;Passing in parameters for isolating size bits
0000139A  163C 0006                761              MOVE.B      #6,D3             ;Start bit index = 6
0000139E  183C 0002                762              MOVE.B      #2,D4             ;Number of bits needed = 2
000013A2                           763              
000013A2                           764              ;Jumps to getBits and returns with isolated bits in D2
000013A2  6100 FDFA                765              BSR         getBits  
000013A6                           766              
000013A6                           767              ;Jumps to printSizeSubroutine and returns after size has been printed
000013A6  6100 00A4                768              BSR         printSizeSubroutine
000013AA                           769         
000013AA                           770              ;======Isolate direction (D) Bit=======
000013AA                           771              ; 0 = data register is destination | 1 = Dn is source
000013AA  4282                     772              CLR.L       D2
000013AC                           773              
000013AC                           774              ;Copy the address values into a register
000013AC  3412                     775              MOVE.W      (A2),D2
000013AE                           776              
000013AE                           777              ;Passing in parameters for isolating direction bit
000013AE  163C 0008                778              MOVE.B      #8,D3             ;Start bit index = 8
000013B2  183C 0001                779              MOVE.B      #1,D4             ;Number of bits needed = 1
000013B6                           780              
000013B6                           781              ;Jumps to getBits and returns with isolated bit in D2
000013B6  6100 FDE6                782              BSR         getBits
000013BA                           783              
000013BA                           784              ;Uses direction bit to see if Dn is the destination. Important because it determines the order in which we isolate and print the addressing bits.
000013BA  B43C 0000                785              CMP.B       #0,D2
000013BE  6700 0006                786              BEQ         dnDest
000013C2  6000 0026                787              BRA         dnSource
000013C6                           788              
000013C6                           789  
000013C6                           790  *-----------------------------------------------------------------
000013C6                           791  * dnDest, dnSource, & other subroutines for isolating address bits
000013C6                           792  *-----------------------------------------------------------------
000013C6                           793  ;* dnDest,dnSource *
000013C6                           794  ;For: MULS,AND,ADD,SUB,DIVU
000013C6                           795  ;Used by instructions that require Dn as one of their addressing modes.
000013C6                           796  ;dnDest isolates the addressing bits with Dn being the destination address
000013C6                           797  ;dnSource isolates the addressing bits with Dn being the source address
000013C6                           798  
000013C6                           799  dnDest:
000013C6                           800              ;**Used for isolating addressing bits when Dn is the destination**
000013C6                           801              
000013C6                           802              ;*SOURCE*
000013C6                           803              ;Jumps to helper subroutine to isolates and return the address mode & register stored in bits 0 - 5
000013C6                           804              ;D6 will contain mode & D7 will contain the register after this instruction
000013C6  6100 0046                805              BSR         isolateAddressBit0to5
000013CA                           806              
000013CA                           807              ;*Print source address*
000013CA  6100 00DA                808              BSR         addressModeSR
000013CE                           809              
000013CE                           810              ;Print comma after source address
000013CE  43F9 0000170F            811              LEA         printComma,A1
000013D4  103C 000E                812              MOVE.B      #14,D0
000013D8  4E4F                     813              TRAP        #15
000013DA                           814              
000013DA                           815              ;*DESTINATION*
000013DA                           816              ;Jumps to helper subroutine to isolates and return the register stored in bits 9 - 11
000013DA                           817              ;D7 will contain the register after this instruction
000013DA  6100 0058                818              BSR         isolateRegisterBit9to11
000013DE                           819              
000013DE                           820              ;Save #%000 into D6 to specify data register mode
000013DE  1C3C 0000                821              MOVE.B      #0,D6
000013E2                           822              
000013E2                           823              ;*Print destination address*
000013E2  6100 00C2                824              BSR         addressModeSR
000013E6                           825  
000013E6  6000 FDAA                826              BRA         update
000013EA                           827              
000013EA                           828  dnSource:
000013EA                           829              ;**Used for isolating addressing bits when Dn is the destination**
000013EA                           830                          
000013EA                           831              ;*SOURCE*
000013EA                           832              ;Jumps to helper subroutine to isolates and return the register stored in bits 9 - 11
000013EA                           833              ;D7 will contain the register after this instruction
000013EA  6100 0048                834              BSR         isolateRegisterBit9to11
000013EE                           835              
000013EE                           836              ;Save #%000 into D6 to specify data register mode
000013EE  1C3C 0000                837              MOVE.B      #0,D6
000013F2                           838              
000013F2                           839              ;*Print Source address*
000013F2  6100 00B2                840              BSR         addressModeSR
000013F6                           841              
000013F6                           842              ;Print comma after source address
000013F6  43F9 0000170F            843              LEA         printComma,A1
000013FC  103C 000E                844              MOVE.B      #14,D0
00001400  4E4F                     845              TRAP        #15
00001402                           846              
00001402                           847              ;*DESTINATION*
00001402                           848              ;Jumps to helper subroutine to isolates and return the address mode & register stored in bits 0 - 5
00001402                           849              ;D6 will contain mode & D7 will contain the register after this instruction
00001402  6100 000A                850              BSR         isolateAddressBit0to5
00001406                           851              
00001406                           852              ;*Print destination address*
00001406  6100 009E                853              BSR         addressModeSR
0000140A                           854  
0000140A  6000 FD86                855              BRA         update
0000140E                           856                     
0000140E                           857  isolateAddressBit0to5:
0000140E                           858  ;Helper subroutine for isolating the address stored within bits 0-5
0000140E                           859  ;Stores address mode in D6
0000140E                           860  ;Stores address register in D7
0000140E                           861  
0000140E                           862              ;======Isolate Effective Address Mode (M) Bits=======
0000140E  4282                     863              CLR.L       D2
00001410                           864              
00001410                           865              ;Copy the address values into a register
00001410  3412                     866              MOVE.W      (A2),D2
00001412                           867              
00001412                           868              ;Passing in parameters for isolating Mode bits
00001412  163C 0003                869              MOVE.B      #3,D3             ;Start bit index = 3
00001416  183C 0003                870              MOVE.B      #3,D4             ;Number of bits needed = 3
0000141A                           871              
0000141A                           872              ;Jumps to getBits and returns with isolated bits in D2
0000141A  4EB8 119E                873              JSR         getBits
0000141E                           874              
0000141E                           875              ;Save M bit into ***D6*** for later use in addressModeSubroutine
0000141E  1C02                     876              MOVE.B      D2,D6
00001420                           877              
00001420                           878                       
00001420                           879              ;======Isolate Effective Address Register (Xn) Bits=======
00001420  4282                     880              CLR.L       D2
00001422                           881              
00001422                           882              ;Copy the address values into a register
00001422  3412                     883              MOVE.W      (A2),D2
00001424                           884              
00001424                           885              ;Passing in parameters for isolating Xn bits
00001424  163C 0000                886              MOVE.B      #0,D3             ;Start bit index = 0
00001428  183C 0003                887              MOVE.B      #3,D4             ;Number of bits needed = 3
0000142C                           888              
0000142C                           889              ;Jumps to getBits and returns with isolated bits in D2
0000142C  6100 FD70                890              BSR         getBits
00001430                           891              
00001430                           892              ;Save Xn register bit into ***D7*** for later use in addressModeSR
00001430  1E02                     893              MOVE.B      D2,D7
00001432                           894              
00001432  4E75                     895              RTS
00001434                           896  
00001434                           897  isolateRegisterBit9to11:
00001434                           898  ;Helper subroutine for isolating the register stored within bits 9-11
00001434                           899  ;Stores the address register in D7
00001434                           900  
00001434                           901              ;======Isolate Register Bits=======
00001434  4282                     902              CLR.L       D2
00001436  4286                     903              CLR.L       D6
00001438  4287                     904              CLR.L       D7
0000143A                           905              
0000143A                           906              ;Copy the address values into a register
0000143A  3412                     907              MOVE.W      (A2),D2
0000143C                           908              
0000143C                           909              ;Passing in parameters for isolating register bits
0000143C  163C 0009                910              MOVE.B      #9,D3             ;Start bit index = 9
00001440  183C 0003                911              MOVE.B      #3,D4             ;Number of bits needed = 3
00001444                           912              
00001444                           913              ;Jumps to getBits and returns with isolated bit in D2
00001444  6100 FD58                914              BSR         getBits
00001448                           915              
00001448                           916              ;Save register bit into ***D7*** for later use in addressModeSR
00001448  1E02                     917              MOVE.B      D2,D7
0000144A                           918  
0000144A  4E75                     919              RTS
0000144C                           920              
0000144C                           921  *-----------------------------------------------------------
0000144C                           922  * Print Sizes
0000144C                           923  *-----------------------------------------------------------
0000144C                           924  printSizeSubroutine:
0000144C                           925              ;Prints the apporpriate size
0000144C                           926              ;PARAMETER:
0000144C                           927              ;D2 = the size bits
0000144C                           928              
0000144C                           929              ;Compare to which size is being moved for the opcode
0000144C  B43C 0000                930              CMP.B      #%00,D2
00001450  6700 001A                931              BEQ        PByte
00001454                           932              
00001454  B43C 0001                933              CMP.B      #%01,D2
00001458  6700 0020                934              BEQ        PWord
0000145C                           935              
0000145C  B43C 0002                936              CMP.B      #%10,D2
00001460  6700 0026                937              BEQ        PLong
00001464                           938              
00001464  B43C 0003                939              CMP.B      #%11,D2
00001468  6700 002C                940              BEQ        sError
0000146C                           941           
0000146C                           942             
0000146C                           943  PByte:
0000146C  43F9 000016E6            944              LEA        printSIZEB,A1
00001472  103C 000E                945              MOVE.B     #14,D0
00001476  4E4F                     946              TRAP       #15
00001478                           947              
00001478  4E75                     948              RTS
0000147A                           949  PWord:
0000147A  43F9 000016EA            950              LEA        printSIZEW,A1
00001480  103C 000E                951              MOVE.B     #14,D0
00001484  4E4F                     952              TRAP       #15
00001486                           953              
00001486  4E75                     954              RTS
00001488                           955  PLong:            
00001488  43F9 000016F0            956              LEA        printSIZEL,A1
0000148E  103C 000E                957              MOVE.B     #14,D0
00001492  4E4F                     958              TRAP       #15
00001494                           959              
00001494  4E75                     960              RTS
00001496                           961              
00001496                           962  sError:            
00001496  43F9 00001802            963              LEA        sizeError,A1
0000149C  103C 000E                964              MOVE.B     #14,D0
000014A0  4E4F                     965              TRAP       #15
000014A2                           966              
000014A2  6000 FCEE                967              BRA        update
000014A6                           968              
000014A6                           969  *-----------------------------------------------------------
000014A6                           970  * Addressing Mode Implementation
000014A6                           971  *-----------------------------------------------------------
000014A6                           972  addressModeSR:
000014A6                           973              ;Prints address according to the parameters passed in
000014A6                           974              ;PARAMETERS:
000014A6                           975              ;D6 = mode
000014A6                           976              ;D7 = register
000014A6                           977  
000014A6                           978              ;Data register direct
000014A6  BC3C 0000                979              CMP.B       #%000,D6
000014AA  6700 0022                980              BEQ         DRD
000014AE                           981              
000014AE                           982              ;Address register direct
000014AE  BC3C 0001                983              CMP.B       #%001,D6
000014B2  6700 002E                984              BEQ         ARD
000014B6                           985              
000014B6                           986              ;Address register indirect
000014B6  BC3C 0002                987              CMP.B       #%010,D6
000014BA  6700 003A                988              BEQ         ARI
000014BE                           989              
000014BE                           990              ;Post Increment
000014BE  BC3C 0003                991              CMP.B       #%011,D6
000014C2  6700 0052                992              BEQ         PI
000014C6                           993              
000014C6                           994              ;Pre Decrement
000014C6  BC3C 0004                995              CMP.B       #%100,D6
000014CA  6700 006A                996              BEQ         PD
000014CE                           997  DRD:
000014CE                           998              ;Print D __
000014CE  43F9 000016F8            999              LEA         printDRD,A1
000014D4  103C 000E               1000              MOVE.B      #14,D0
000014D8  4E4F                    1001              TRAP        #15
000014DA                          1002              
000014DA                          1003              ;Print register number
000014DA  7003                    1004              MOVE.L      #3,D0
000014DC  2207                    1005              MOVE.L      D7,D1
000014DE  4E4F                    1006              TRAP        #15
000014E0                          1007              
000014E0  4E75                    1008              RTS
000014E2                          1009  ARD:
000014E2                          1010              ;Print A __
000014E2  43F9 000016FA           1011              LEA         printARD,A1
000014E8  103C 000E               1012              MOVE.B      #14,D0
000014EC  4E4F                    1013              TRAP        #15
000014EE                          1014              
000014EE                          1015              ;Print register number
000014EE  7003                    1016              MOVE.L      #3,D0
000014F0  2207                    1017              MOVE.L      D7,D1
000014F2  4E4F                    1018              TRAP        #15
000014F4                          1019              
000014F4  4E75                    1020              RTS
000014F6                          1021  ARI:
000014F6                          1022              ;Print (A __ )
000014F6  43F9 000016FC           1023              LEA         printARI,A1
000014FC  103C 000E               1024              MOVE.B      #14,D0
00001500  4E4F                    1025              TRAP        #15
00001502                          1026              
00001502                          1027              ;Print register number
00001502  7003                    1028              MOVE.L      #3,D0
00001504  2207                    1029              MOVE.L      D7,D1
00001506  4E4F                    1030              TRAP        #15
00001508                          1031              
00001508                          1032              ;Print closing ')'
00001508  43F9 000016FF           1033              LEA         printARI2,A1
0000150E  103C 000E               1034              MOVE.B      #14,D0
00001512  4E4F                    1035              TRAP        #15
00001514                          1036              
00001514  4E75                    1037              RTS
00001516                          1038  PI:
00001516                          1039              ;Print (A __)+
00001516  43F9 00001703           1040              LEA         printPI,A1
0000151C  103C 000E               1041              MOVE.B      #14,D0
00001520  4E4F                    1042              TRAP        #15
00001522                          1043              
00001522                          1044              ;Print register number
00001522  7003                    1045              MOVE.L      #3,D0
00001524  2207                    1046              MOVE.L      D7,D1
00001526  4E4F                    1047              TRAP        #15
00001528                          1048              
00001528                          1049              ;Print closing ')+'
00001528  43F9 00001706           1050              LEA         printPI2,A1
0000152E  103C 000E               1051              MOVE.B      #14,D0
00001532  4E4F                    1052              TRAP        #15
00001534                          1053              
00001534  4E75                    1054              RTS
00001536                          1055  PD:
00001536                          1056              ;Print -(A __)
00001536  43F9 00001709           1057              LEA         printPD,A1
0000153C  103C 000E               1058              MOVE.B      #14,D0
00001540  4E4F                    1059              TRAP        #15
00001542                          1060              
00001542                          1061              ;Print register number
00001542  7003                    1062              MOVE.L      #3,D0
00001544  2207                    1063              MOVE.L      D7,D1
00001546  4E4F                    1064              TRAP        #15
00001548                          1065              
00001548                          1066              ;Print closing ')'
00001548  43F9 0000170D           1067              LEA         printPD2,A1
0000154E  103C 000E               1068              MOVE.B      #14,D0
00001552  4E4F                    1069              TRAP        #15
00001554                          1070              
00001554  4E75                    1071              RTS
00001556                          1072  IA:
00001556                          1073              ;Print #$ ______
00001556  4E75                    1074              RTS
00001558                          1075  ALA:
00001558                          1076              ;Print $-------- (8 digits)
00001558  4E75                    1077              RTS
0000155A                          1078  AWA:
0000155A                          1079              ;Print $---- (4 digits)
0000155A  4E75                    1080              RTS
0000155C                          1081  
0000155C                          1082  
0000155C                          1083  *-----------------------------------------------------------
0000155C                          1084  * Print Instructions for NOP and RTS
0000155C                          1085  *-----------------------------------------------------------
0000155C                          1086  printN:
0000155C  43F9 00001662           1087              LEA        printNOP,A1
00001562  103C 000E               1088              MOVE.B     #14,D0
00001566  4E4F                    1089              TRAP       #15
00001568                          1090              
00001568  6000 FC28               1091              BRA        update
0000156C                          1092  
0000156C                          1093  printR:
0000156C  43F9 000016DA           1094              LEA        printRTS,A1
00001572  103C 000E               1095              MOVE.B     #14,D0
00001576  4E4F                    1096              TRAP       #15
00001578                          1097              
00001578  6000 FC18               1098              BRA        update
0000157C                          1099  ;-----------------------------------------------------------
0000157C                          1100  ;ERROR MESSAGES FOR I/O portion
0000157C                          1101  ;-----------------------------------------------------------
0000157C                          1102  charError:
0000157C                          1103              
0000157C  43F9 00001734           1104              LEA         invalCh,A1
00001582  103C 000E               1105              MOVE.B      #14,D0
00001586  4E4F                    1106              TRAP        #15
00001588                          1107              
00001588  6000 FA8E               1108              BRA         startingPrompt
0000158C                          1109            
0000158C                          1110  oddError:
0000158C  43F9 00001755           1111              LEA         odd,A1
00001592  103C 000E               1112              MOVE.B      #14,D0
00001596  4E4F                    1113              TRAP        #15
00001598                          1114              
00001598  6000 FA7E               1115              BRA         startingPrompt
0000159C                          1116              
0000159C                          1117  manyCharError:  
0000159C  43F9 00001782           1118              LEA         manyChar, A1
000015A2  103C 000E               1119              MOVE.B      #14,D0
000015A6  4E4F                    1120              TRAP        #15
000015A8                          1121              
000015A8  6000 FA6E               1122              BRA         startingPrompt
000015AC                          1123           
000015AC                          1124  endGreater:
000015AC  43F9 000017BD           1125              LEA         endG,A1
000015B2  103C 000E               1126              MOVE.B      #14,D0
000015B6  4E4F                    1127              TRAP        #15
000015B8                          1128              
000015B8  6000 FA5E               1129              BRA         startingPrompt
000015BC                          1130      
000015BC                          1131  ;-----------------------------------------------------------
000015BC                          1132  ;MESSAGES
000015BC                          1133  ;-----------------------------------------------------------
000015BC= 57 65 6C 63 6F 6D ...   1134  Welcome     DC.B        'Welcome to the DASM by Group MULS',CR,LF,0
000015E0= 50 6C 65 61 73 65 ...   1135  userSA      DC.B        'Please enter your starting hex address (Only uppercase letters)',CR,LF,0
00001622= 50 6C 65 61 73 65 ...   1136  userEA      DC.B        'Please enter your ending hex address (Only uppercase letters)',CR,LF,0
00001662                          1137  
00001662                          1138  ;-----------------------------------------------------------
00001662                          1139  ;OPCODE Messages
00001662                          1140  ;-----------------------------------------------------------
00001662= 0D 0A 4E 4F 50 00       1141  printNOP    DC.B        CR,LF,'NOP',0
00001668= 0D 0A 4D 4F 56 45 00    1142  printMOVE   DC.B        CR,LF,'MOVE',0
0000166F= 0D 0A 4D 4F 56 45 ...   1143  printMOVEM  DC.B        CR,LF,'MOVEM',0
00001677= 0D 0A 41 44 44 00       1144  printADD    DC.B        CR,LF,'ADD',0
0000167D= 0D 0A 53 55 42 00       1145  printSUB    DC.B        CR,LF,'SUB',0
00001683= 0D 0A 4D 55 4C 53 ...   1146  printMULS   DC.B        CR,LF,'MULS.W ',0
0000168D= 0D 0A 44 49 56 55 ...   1147  printDIVU   DC.B        CR,LF,'DIVU.W ',0
00001697= 0D 0A 4C 45 41 20 00    1148  printLEA    DC.B        CR,LF,'LEA ',0
0000169E= 0D 0A 41 4E 44 00       1149  printAND    DC.B        CR,LF,'AND',0
000016A4= 0D 0A 4E 4F 54 00       1150  printNOT    DC.B        CR,LF,'NOT',0
000016AA= 0D 0A 4C 53 4C 00       1151  printLSL    DC.B        CR,LF,'LSL',0
000016B0= 0D 0A 4C 53 52 00       1152  printLSR    DC.B        CR,LF,'LSR',0
000016B6= 0D 0A 41 53 4C 00       1153  printASL    DC.B        CR,LF,'ASL',0
000016BC= 0D 0A 41 53 52 00       1154  printASR    DC.B        CR,LF,'ASR',0
000016C2= 0D 0A 42 4C 54 00       1155  printBLT    DC.B        CR,LF,'BLT',0
000016C8= 0D 0A 42 47 45 00       1156  printBGE    DC.B        CR,LF,'BGE',0
000016CE= 0D 0A 42 45 51 00       1157  printBEQ    DC.B        CR,LF,'BEQ',0
000016D4= 0D 0A 4A 53 52 00       1158  printJSR    DC.B        CR,LF,'JSR',0
000016DA= 0D 0A 52 54 53 00       1159  printRTS    DC.B        CR,LF,'RTS',0
000016E0= 0D 0A 42 52 41 00       1160  printBRA    DC.B        CR,LF,'BRA',0
000016E6                          1161  
000016E6                          1162  ;-----------------------------------------------------------
000016E6                          1163  ;Size Messages
000016E6                          1164  ;-----------------------------------------------------------
000016E6= 2E 42 20 00             1165  printSIZEB   DC.B        '.B ',0
000016EA= 2E57 2000 0000          1166  printSIZEW   DC.W        '.W ',0
000016F0= 2E4C2000 00000000       1167  printSIZEL   DC.L        '.L ',0
000016F8                          1168  
000016F8                          1169  ;-----------------------------------------------------------
000016F8                          1170  ;Addressing Mode Messages
000016F8                          1171  ;-----------------------------------------------------------
000016F8= 44 00                   1172  printDRD      DC.B        'D',0
000016FA= 41 00                   1173  printARD      DC.B        'A',0
000016FC= 28 41 00                1174  printARI      DC.B        '(A',0
000016FF= 29 00                   1175  printARI2     DC.B        ')',0
00001701= 23 00                   1176  printIA       DC.B        '#',0
00001703= 28 41 00                1177  printPI       DC.B        '(A',0
00001706= 29 2B 00                1178  printPI2      DC.B        ')+',0
00001709= 2D 28 41 00             1179  printPD       DC.B        '-(A',0
0000170D= 29 00                   1180  printPD2      DC.B        ')',0
0000170F                          1181  ;printAA       DC.B        ''   /TBD
0000170F                          1182  
0000170F= 2C 00                   1183  printComma    DC.B        ',',0
00001711= 20 00                   1184  printSpace    DC.B        ' ',0
00001713                          1185  
00001713= 0D 0A 59 6F 75 20 ...   1186  theEnd      DC.B        CR,LF,'You are now ending the program',0
00001734                          1187  
00001734                          1188  ;-----------------------------------------------------------
00001734                          1189  ;ERRORS
00001734                          1190  ;-----------------------------------------------------------
00001734= 45 52 52 4F 52 3A ...   1191  invalCh     DC.B        'ERROR: Invalid Characters used',CR,LF,0
00001755= 45 52 52 4F 52 3A ...   1192  odd         DC.B        'ERROR: Cannot start at odd memory location',CR,LF,0
00001782= 45 52 52 4F 52 3A ...   1193  manyChar    DC.B        'ERROR: Cannot have more than 6 characters in the address',CR,LF,0
000017BD= 45 52 52 4F 52 3A ...   1194  endG        DC.B        'ERROR: The ending address cannot be less than the starting address',CR,LF,0
00001802= 45 52 52 4F 52 3A ...   1195  sizeError   DC.B        'ERROR: Invalid size instruction',0
00001822                          1196  
00001822                          1197  ;-----------------------------------------------------------
00001822                          1198  ;Ending function that ends our program 
00001822                          1199  ;-----------------------------------------------------------
00001822                          1200  ending:
00001822  43F8 1713               1201              LEA         theEnd,A1
00001826  303C 000E               1202              MOVE        #14,D0
0000182A  4E4F                    1203              TRAP        #15
0000182C                          1204              
0000182C                          1205              END         MAIN 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESSMODESR       14A6
ALA                 1558
ARD                 14E2
ARI                 14F6
AWA                 155A
CHARERROR           157C
CONTINUEDIVU        12C6
CONVERT             106C
CR                  D
DNDEST              13C6
DNSOURCE            13EA
DRD                 14CE
ENDG                17BD
ENDGREATER          15AC
ENDHEX              1004
ENDING              1822
ENDINGPROMPT        1044
GETBITS             119E
IA                  1556
INVALCH             1734
ISOLATEADDRESSBIT0TO5  140E
ISOLATEREGISTERBIT9TO11  1434
LETTER              1090
LF                  A
LOOP                1120
M00                 11B4
M0100               11DA
M0110               12AA
M1000               12AA
M1001               12D6
M1100               1314
M1101               1388
M1110               1388
MAIN                1000
MAND                1358
MANYCHAR            1782
MANYCHARERROR       159C
MASL                1388
MASR                1388
MBEQ                12AA
MBGE                12AA
MBLT                12AA
MBRA                12AA
MJSR                1292
MLEA                1236
MLSL                1388
MLSR                1388
MMULS               1348
MNOT                1266
MORECHECKS          10C0
MORECHECKS1         10CC
MORECHECKS2         10EE
MOVEM               1236
MULSCHECK           1332
NUMBER              10A4
ODD                 1755
ODDERROR            158C
PBYTE               146C
PD                  1536
PI                  1516
PLONG               1488
PRINTADD            1677
PRINTAND            169E
PRINTARD            16FA
PRINTARI            16FC
PRINTARI2           16FF
PRINTASL            16B6
PRINTASR            16BC
PRINTBEQ            16CE
PRINTBGE            16C8
PRINTBLT            16C2
PRINTBRA            16E0
PRINTCOMMA          170F
PRINTDIVU           168D
PRINTDRD            16F8
PRINTIA             1701
PRINTJSR            16D4
PRINTLEA            1697
PRINTLSL            16AA
PRINTLSR            16B0
PRINTMOVE           1668
PRINTMOVEM          166F
PRINTMULS           1683
PRINTN              155C
PRINTNOP            1662
PRINTNOT            16A4
PRINTPD             1709
PRINTPD2            170D
PRINTPI             1703
PRINTPI2            1706
PRINTR              156C
PRINTRTS            16DA
PRINTSIZEB          16E6
PRINTSIZEL          16F0
PRINTSIZESUBROUTINE  144C
PRINTSIZEW          16EA
PRINTSPACE          1711
PRINTSUB            167D
PWORD               147A
SERROR              1496
SIZEERROR           1802
STAHEX              1000
STARTINGPROMPT      1018
THEEND              1713
UPDATE              1192
USEREA              1622
USERSA              15E0
WELCOME             15BC
